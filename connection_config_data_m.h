//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/connection_config_data.msg.
//

#ifndef __INET_CONNECTION_CONFIG_DATA_M_H
#define __INET_CONNECTION_CONFIG_DATA_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class connection_config_data;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/connection_config_data.msg:25</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class connection_config_data extends FieldsChunk
 * {
 *     int connection_data[];
 *     int server_number;
 *     int my_client_number;
 * }
 * </pre>
 */
class INET_API connection_config_data : public ::inet::FieldsChunk
{
  protected:
    int *connection_data = nullptr;
    size_t connection_data_arraysize = 0;
    int server_number = 0;
    int my_client_number = 0;

  private:
    void copy(const connection_config_data& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const connection_config_data&);

  public:
    connection_config_data();
    connection_config_data(const connection_config_data& other);
    virtual ~connection_config_data();
    connection_config_data& operator=(const connection_config_data& other);
    virtual connection_config_data *dup() const override {return new connection_config_data(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setConnection_dataArraySize(size_t size);
    virtual size_t getConnection_dataArraySize() const;
    virtual int getConnection_data(size_t k) const;
    virtual void setConnection_data(size_t k, int connection_data);
    virtual void insertConnection_data(int connection_data);
    virtual void insertConnection_data(size_t k, int connection_data);
    virtual void eraseConnection_data(size_t k);
    virtual int getServer_number() const;
    virtual void setServer_number(int server_number);
    virtual int getMy_client_number() const;
    virtual void setMy_client_number(int my_client_number);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const connection_config_data& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, connection_config_data& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_CONNECTION_CONFIG_DATA_M_H

