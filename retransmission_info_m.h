//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/retransmission_info.msg.
//

#ifndef __INET_RETRANSMISSION_INFO_M_H
#define __INET_RETRANSMISSION_INFO_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class retransmission_info;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

// cplusplus {{
#include <vector>
typedef std::vector<int> IntVector;
// }}

/**
 * Class generated from <tt>inet/applications/quicapp/retransmission_info.msg:34</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class retransmission_info extends cNamedObject
 * {
 *     IntVector packets_numbers;
 *     bool is_retransmit;
 * 
 * }
 * </pre>
 */
class INET_API retransmission_info : public ::omnetpp::cNamedObject
{
  protected:
    IntVector packets_numbers;
    bool is_retransmit = false;

  private:
    void copy(const retransmission_info& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const retransmission_info&);

  public:
    retransmission_info(const char *name=nullptr);
    retransmission_info(const retransmission_info& other);
    virtual ~retransmission_info();
    retransmission_info& operator=(const retransmission_info& other);
    virtual retransmission_info *dup() const override {return new retransmission_info(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const IntVector& getPackets_numbers() const;
    virtual IntVector& getPackets_numbersForUpdate() { return const_cast<IntVector&>(const_cast<retransmission_info*>(this)->getPackets_numbers());}
    virtual void setPackets_numbers(const IntVector& packets_numbers);
    virtual bool getIs_retransmit() const;
    virtual void setIs_retransmit(bool is_retransmit);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const retransmission_info& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, retransmission_info& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_RETRANSMISSION_INFO_M_H

