//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/ResetStreamFrame.msg.
//

#ifndef __INET_RESETSTREAMFRAME_M_H
#define __INET_RESETSTREAMFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ResetStreamFrame;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/quicapp/headers_and_frames/QuicFrame_m.h" // import inet.applications.quicapp.headers_and_frames.QuicFrame


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/ResetStreamFrame.msg:25</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class ResetStreamFrame extends QuicFrame
 * {
 *     //An endpoint uses a RESET_STREAM frame (type=0x04) to abruptly terminate the sending part of a stream.
 *     //After sending a RESET_STREAM, an endpoint ceases transmission and retransmission of STREAM frames on
 *     //the identified stream. A receiver of RESET_STREAM can discard any data that it already received on that 
 *     //stream. (RFC 19.4)
 *     int stream_id; // stream being terminated
 *     int final_size; // final size of the stream by the RESET_STREAM sender, in unit of bytes
 *     int error_code; // application protocol error code that indicates why the stream is being closed
 * }
 * </pre>
 */
class INET_API ResetStreamFrame : public ::inet::QuicFrame
{
  protected:
    int stream_id = 0;
    int final_size = 0;
    int error_code = 0;

  private:
    void copy(const ResetStreamFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ResetStreamFrame&);

  public:
    ResetStreamFrame();
    ResetStreamFrame(const ResetStreamFrame& other);
    virtual ~ResetStreamFrame();
    ResetStreamFrame& operator=(const ResetStreamFrame& other);
    virtual ResetStreamFrame *dup() const override {return new ResetStreamFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getStream_id() const;
    virtual void setStream_id(int stream_id);
    virtual int getFinal_size() const;
    virtual void setFinal_size(int final_size);
    virtual int getError_code() const;
    virtual void setError_code(int error_code);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResetStreamFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResetStreamFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_RESETSTREAMFRAME_M_H

