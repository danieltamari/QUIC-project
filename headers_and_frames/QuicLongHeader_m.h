//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/QuicLongHeader.msg.
//

#ifndef __INET_QUICLONGHEADER_M_H
#define __INET_QUICLONGHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class QuicLongHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/quicapp/headers_and_frames/QuicPacketHeader_m.h" // import inet.applications.quicapp.headers_and_frames.QuicPacketHeader


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/QuicLongHeader.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class QuicLongHeader extends QuicPacketHeader
 * {
 *     b header_form; // The most significant bit of byte 0 is set to 1 for long headers
 *     b fixed_bit; // The next bit of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
 *     int long_packet_type; // The next two bits of byte 0 contain a packet type:
 *     //		0x0	Initial	
 *     //		0x1	0-RTT	
 *     //		0x2	Handshake	
 *     //		0x3	Retry	
 *     int version; //32-bit field that follows the first byte. This field indicates the version of QUIC that is in use
 *     unsigned int dest_connection_id_length; // length in bytes of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer
 *     //int dest_connection_ID; // max size is 20 Bytes
 *     unsigned int source_connection_id_length; // length in bytes of the Destination Connection ID field that follows it. This length is encoded as an 8-bit unsigned integer
 *     int source_connection_ID; // max size is 20 Bytes
 * 
 * 	// total size(in bytes): 11 + dest_connection_id_length + source_connection_id_length
 * }
 * </pre>
 */
class INET_API QuicLongHeader : public ::inet::QuicPacketHeader
{
  protected:
    b header_form = b(-1);
    b fixed_bit = b(-1);
    int long_packet_type = 0;
    int version = 0;
    unsigned int dest_connection_id_length = 0;
    unsigned int source_connection_id_length = 0;
    int source_connection_ID = 0;

  private:
    void copy(const QuicLongHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QuicLongHeader&);

  public:
    QuicLongHeader();
    QuicLongHeader(const QuicLongHeader& other);
    virtual ~QuicLongHeader();
    QuicLongHeader& operator=(const QuicLongHeader& other);
    virtual QuicLongHeader *dup() const override {return new QuicLongHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual b getHeader_form() const;
    virtual void setHeader_form(b header_form);
    virtual b getFixed_bit() const;
    virtual void setFixed_bit(b fixed_bit);
    virtual int getLong_packet_type() const;
    virtual void setLong_packet_type(int long_packet_type);
    virtual int getVersion() const;
    virtual void setVersion(int version);
    virtual unsigned int getDest_connection_id_length() const;
    virtual void setDest_connection_id_length(unsigned int dest_connection_id_length);
    virtual unsigned int getSource_connection_id_length() const;
    virtual void setSource_connection_id_length(unsigned int source_connection_id_length);
    virtual int getSource_connection_ID() const;
    virtual void setSource_connection_ID(int source_connection_ID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QuicLongHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QuicLongHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_QUICLONGHEADER_M_H

