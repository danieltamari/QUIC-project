//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/ACKFrame.msg.
//

#ifndef __INET_ACKFRAME_M_H
#define __INET_ACKFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

struct range;

namespace inet {

class ACKFrame;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/applications/quicapp/QuicConnection.h"
// }}

/**
 * Struct generated from inet/applications/quicapp/headers_and_frames/ACKFrame.msg:28 by nedtool.
 */
struct INET_API range
{
    range();
    int gap;
    int ACK_range_length;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const range& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, range& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const range& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, range& obj) { __doUnpacking(b, obj); }


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/ACKFrame.msg:39</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class ACKFrame extends FieldsChunk
 * {
 *     //    Receivers send ACK frames (types 0x02 and 0x03) to inform senders of packets they have received and
 *     //    processed. The ACK frame contains one or more ACK Ranges. ACK Ranges identify acknowledged packets.
 *     //	  (RFC 19.3)
 *     int largest_acknowledged; //  largest packet number the peer is acknowledging- the largest packet number that the peer has received prior to generating the ACK frame.
 *     int ACK_delay; // acknowledgement delay in microseconds
 *     int ACK_range_count;
 *     int first_ACK_range; // number of contiguous packets preceding the Largest Acknowledged that are being acknowledged
 *     range ACK_ranges[];
 * }
 * </pre>
 */
class INET_API ACKFrame : public ::inet::FieldsChunk
{
  protected:
    int largest_acknowledged = 0;
    int ACK_delay = 0;
    int ACK_range_count = 0;
    int first_ACK_range = 0;
    range *ACK_ranges = nullptr;
    size_t ACK_ranges_arraysize = 0;

  private:
    void copy(const ACKFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ACKFrame&);

  public:
    ACKFrame();
    ACKFrame(const ACKFrame& other);
    virtual ~ACKFrame();
    ACKFrame& operator=(const ACKFrame& other);
    virtual ACKFrame *dup() const override {return new ACKFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getLargest_acknowledged() const;
    virtual void setLargest_acknowledged(int largest_acknowledged);
    virtual int getACK_delay() const;
    virtual void setACK_delay(int ACK_delay);
    virtual int getACK_range_count() const;
    virtual void setACK_range_count(int ACK_range_count);
    virtual int getFirst_ACK_range() const;
    virtual void setFirst_ACK_range(int first_ACK_range);
    virtual void setACK_rangesArraySize(size_t size);
    virtual size_t getACK_rangesArraySize() const;
    virtual const range& getACK_ranges(size_t k) const;
    virtual range& getACK_rangesForUpdate(size_t k) { handleChange();return const_cast<range&>(const_cast<ACKFrame*>(this)->getACK_ranges(k));}
    virtual void setACK_ranges(size_t k, const range& ACK_ranges);
    virtual void insertACK_ranges(const range& ACK_ranges);
    virtual void insertACK_ranges(size_t k, const range& ACK_ranges);
    virtual void eraseACK_ranges(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ACKFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ACKFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACKFRAME_M_H

