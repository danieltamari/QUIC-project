//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/ConnectionCloseFrame.msg.
//

#ifndef __INET_CONNECTIONCLOSEFRAME_M_H
#define __INET_CONNECTIONCLOSEFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ConnectionCloseFrame;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/quicapp/headers_and_frames/QuicFrame_m.h" // import inet.applications.quicapp.headers_and_frames.QuicFrame


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/ConnectionCloseFrame.msg:25</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class ConnectionCloseFrame extends QuicFrame
 * {
 *     //An endpoint sends a CONNECTION_CLOSE frame (type=0x1c or 0x1d) to notify its peer that the connection is
 *     //being closed. The CONNECTION_CLOSE with a frame type of 0x1c is used to signal errors at only the QUIC 
 *     //layer, or the absence of errors (with the NO_ERROR code). The CONNECTION_CLOSE frame with a type of 0x1d 
 *     //is used to signal an error with the application that uses QUIC.(RFC 19.19)
 *     int error_code; // indicates the reason for closing this connection
 *     int frame_type; // frame that triggered the error. A value of 0 is used when the frame type is unknown
 *     char reason_pharse[]; // A human-readable explanation for why the connection was closed
 *     int reason_pharse_length; // length of the reason phrase in bytes
 * }
 * </pre>
 */
class INET_API ConnectionCloseFrame : public ::inet::QuicFrame
{
  protected:
    int error_code = 0;
    int frame_type = 0;
    char *reason_pharse = nullptr;
    size_t reason_pharse_arraysize = 0;
    int reason_pharse_length = 0;

  private:
    void copy(const ConnectionCloseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ConnectionCloseFrame&);

  public:
    ConnectionCloseFrame();
    ConnectionCloseFrame(const ConnectionCloseFrame& other);
    virtual ~ConnectionCloseFrame();
    ConnectionCloseFrame& operator=(const ConnectionCloseFrame& other);
    virtual ConnectionCloseFrame *dup() const override {return new ConnectionCloseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getError_code() const;
    virtual void setError_code(int error_code);
    virtual int getFrame_type() const;
    virtual void setFrame_type(int frame_type);
    virtual void setReason_pharseArraySize(size_t size);
    virtual size_t getReason_pharseArraySize() const;
    virtual char getReason_pharse(size_t k) const;
    virtual void setReason_pharse(size_t k, char reason_pharse);
    virtual void insertReason_pharse(char reason_pharse);
    virtual void insertReason_pharse(size_t k, char reason_pharse);
    virtual void eraseReason_pharse(size_t k);
    virtual int getReason_pharse_length() const;
    virtual void setReason_pharse_length(int reason_pharse_length);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ConnectionCloseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ConnectionCloseFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_CONNECTIONCLOSEFRAME_M_H

