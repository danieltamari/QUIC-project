//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/NewConnectionIDFrame.msg.
//

#ifndef __INET_NEWCONNECTIONIDFRAME_M_H
#define __INET_NEWCONNECTIONIDFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class NewConnectionIDFrame;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/quicapp/headers_and_frames/QuicFrame_m.h" // import inet.applications.quicapp.headers_and_frames.QuicFrame


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/NewConnectionIDFrame.msg:25</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class NewConnectionIDFrame extends QuicFrame
 * {
 *     //An endpoint sends a NEW_CONNECTION_ID frame (type=0x18) to provide its peer with alternative connection IDs
 *     //that can be used to break linkability when migrating connections. (RFC 19.15)
 *     int retire_prior_to; // indicating which connection IDs should be retired
 *     unsigned int length; // containing the length of the connection ID in Bytes
 *     int connection_ID; // A connection ID of the specified length
 * }
 * </pre>
 */
class INET_API NewConnectionIDFrame : public ::inet::QuicFrame
{
  protected:
    int retire_prior_to = 0;
    unsigned int length = 0;
    int connection_ID = 0;

  private:
    void copy(const NewConnectionIDFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewConnectionIDFrame&);

  public:
    NewConnectionIDFrame();
    NewConnectionIDFrame(const NewConnectionIDFrame& other);
    virtual ~NewConnectionIDFrame();
    NewConnectionIDFrame& operator=(const NewConnectionIDFrame& other);
    virtual NewConnectionIDFrame *dup() const override {return new NewConnectionIDFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getRetire_prior_to() const;
    virtual void setRetire_prior_to(int retire_prior_to);
    virtual unsigned int getLength() const;
    virtual void setLength(unsigned int length);
    virtual int getConnection_ID() const;
    virtual void setConnection_ID(int connection_ID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NewConnectionIDFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NewConnectionIDFrame& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_NEWCONNECTIONIDFRAME_M_H

