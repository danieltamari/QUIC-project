//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/quicapp/headers_and_frames/QuicShortHeader.msg.
//

#ifndef __INET_QUICSHORTHEADER_M_H
#define __INET_QUICSHORTHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class QuicShortHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/applications/base/ApplicationPacket_m.h" // import inet.applications.base.ApplicationPacket

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/applications/quicapp/headers_and_frames/QuicPacketHeader_m.h" // import inet.applications.quicapp.headers_and_frames.QuicPacketHeader


namespace inet {

/**
 * Class generated from <tt>inet/applications/quicapp/headers_and_frames/QuicShortHeader.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * class QuicShortHeader extends QuicPacketHeader
 * {
 *     b header_form; // The most significant bit of byte 0 is set to 1 for long headers
 *     b fixed_bit; // The next bit of byte 0 is set to 1. Packets containing a zero value for this bit are not valid packets in this version and MUST be discarded.
 *     b spin_bit;
 *     B reserved_bits;
 *     B packet_number_length; // contain the length of the packet number, encoded as an unsigned, two-bit integer that is one less than the length of the packet number field in bytes
 *     int dest_connection_ID; // The Destination Connection ID is a connection ID that is chosen by the intended recipient of the packet, max size is 20 Bytes
 *     int packet_number; //  The packet number field is 1 to 4 bytes long
 *     // remove later
 *     int packet_type;
 * 
 * 	// total size(in bytes): 1 + packet_number_length + dest_connection_id_length
 * }
 * </pre>
 */
class INET_API QuicShortHeader : public ::inet::QuicPacketHeader
{
  protected:
    b header_form = b(-1);
    b fixed_bit = b(-1);
    b spin_bit = b(-1);
    B reserved_bits = B(-1);
    B packet_number_length = B(-1);
    int dest_connection_ID = 0;
    int packet_number = 0;
    int packet_type = 0;

  private:
    void copy(const QuicShortHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QuicShortHeader&);

  public:
    QuicShortHeader();
    QuicShortHeader(const QuicShortHeader& other);
    virtual ~QuicShortHeader();
    QuicShortHeader& operator=(const QuicShortHeader& other);
    virtual QuicShortHeader *dup() const override {return new QuicShortHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual b getHeader_form() const;
    virtual void setHeader_form(b header_form);
    virtual b getFixed_bit() const;
    virtual void setFixed_bit(b fixed_bit);
    virtual b getSpin_bit() const;
    virtual void setSpin_bit(b spin_bit);
    virtual B getReserved_bits() const;
    virtual void setReserved_bits(B reserved_bits);
    virtual B getPacket_number_length() const;
    virtual void setPacket_number_length(B packet_number_length);
    virtual int getDest_connection_ID() const;
    virtual void setDest_connection_ID(int dest_connection_ID);
    virtual int getPacket_number() const;
    virtual void setPacket_number(int packet_number);
    virtual int getPacket_type() const;
    virtual void setPacket_type(int packet_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QuicShortHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QuicShortHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_QUICSHORTHEADER_M_H

